{"version":3,"sources":["Components/formBuilder.js","Components/showandfill.js","Components/allforms.js","Components/showres.js","Components/responses.js","App.js","serviceWorker.js","index.js"],"names":["formBuilder","props","handleStatic","e","addedPanel","state","panels","push","type","value","edit","setState","handleText","label","handleRadio","values","handleDrop","changeOptions","i","j","node","target","addOptions","deleteOptions","splice","handleChange","x","removepanel","afterUpload","fileReader","FileReader","readAsText","files","mypanel","onload","JSON","parse","result","map","downloadFile","a","myData","fileName","json","stringify","blob","Blob","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","publish","length","alert","axios","post","then","res","bind","className","name","id","class","onChange","this","accept","for","onClick","style","color","to","marginLeft","count","onBlur","temp","marginTop","disabled","newcount","marginRight","Dropdown","Toggle","variant","Menu","Item","Button","Component","showandfill","textChange","datas","answer","sendresponse","panel","newForm","newformdata","placeholder","options","allforms","selected","selectedform","get","data","margin","hasOwnProperty","showres","responses","console","log","App","path","exact","component","FormBuilder","AllForm","Responses","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b8bc66be.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default class formBuilder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      panels: [],\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleStatic.bind(this);\r\n  }\r\n\r\n  handleStatic = (e) => {\r\n    let panel = {\r\n      type: \"static\",\r\n      value: \"\",\r\n      edit: true,\r\n    };\r\n    let addedPanel = [...this.state.panels];\r\n    addedPanel.push(panel);\r\n    this.setState({\r\n      panels: addedPanel,\r\n    });\r\n    // console.log(this.state, \"handlestatic\");\r\n  };\r\n\r\n  handleText = (e) => {\r\n    let panel = {\r\n      type: \"text\",\r\n      value: \"\",\r\n      label: \"\",\r\n      edit: true,\r\n    };\r\n    let addedPanel = [...this.state.panels];\r\n    addedPanel.push(panel);\r\n    this.setState({\r\n      panels: addedPanel,\r\n    });\r\n    // console.log(this.state, \"handlestatic\");\r\n  };\r\n\r\n  handleRadio = (e) => {\r\n    let panel = {\r\n      type: \"radio\",\r\n      values: [\"\"],\r\n      value: \"\",\r\n      edit: true,\r\n    };\r\n    let addedPanel = [...this.state.panels];\r\n    addedPanel.push(panel);\r\n    this.setState({\r\n      panels: addedPanel,\r\n    });\r\n    // console.log(this.state, \"handlestatic\");\r\n  };\r\n\r\n  handleDrop = (e) => {\r\n    let panel = {\r\n      type: \"dropdown\",\r\n      values: [\"\"],\r\n      value: \"\",\r\n      edit: true,\r\n    };\r\n    let addedPanel = [...this.state.panels];\r\n    addedPanel.push(panel);\r\n    this.setState({\r\n      panels: addedPanel,\r\n    });\r\n    // console.log(this.state, \"handlestatic\");\r\n  };\r\n  changeOptions = (e, i, j) => {\r\n    let node = this.state.panels;\r\n    node[i].values[j] = e.target.value;\r\n    this.setState({\r\n      panels: node,\r\n    });\r\n    // console.log(this.state, e, i, j);\r\n  };\r\n\r\n  addOptions = (e, i) => {\r\n    let node = this.state.panels;\r\n    node[i].values.push(\"\");\r\n    this.setState({\r\n      panels: node,\r\n    });\r\n  };\r\n\r\n  deleteOptions = (e, i, j) => {\r\n    let node = this.state.panels;\r\n    node[i].values.splice(j, 1);\r\n    // node[i].values.push(\"\");\r\n    this.setState({\r\n      panels: node,\r\n    });\r\n  };\r\n\r\n  handleChange = (e, i) => {\r\n    let x = this.state.panels;\r\n    x[i].value = e.target.value;\r\n    this.setState({\r\n      panels: x,\r\n    });\r\n    // console.log(this.state);\r\n  };\r\n\r\n  removepanel = (e, i) => {\r\n    let node = this.state.panels;\r\n    node.splice(i, 1);\r\n    this.setState({\r\n      panels: node,\r\n    });\r\n  };\r\n\r\n  afterUpload = (e) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsText(e.target.files[0], \"UTF-8\");\r\n    let mydatas;\r\n    let mypanel = [];\r\n    fileReader.onload = (e) => {\r\n      mydatas = JSON.parse(e.target.result);\r\n      // console.log(\r\n      //   \"e.target.result\",\r\n      //   JSON.parse(e.target.result),\r\n      //   e.target.result\r\n      // );\r\n      // console.log(\"uploaded\");\r\n      //   setFiles(e.target.result);\r\n      mydatas.map((node) => {\r\n        mypanel.push(node);\r\n      });\r\n      this.setState({\r\n        panels: mypanel,\r\n      });\r\n    };\r\n  };\r\n\r\n  downloadFile = async () => {\r\n    let myData = this.state.panels;\r\n\r\n    // console.log(myData, \"hey\");\r\n    const fileName = \"file\";\r\n    const json = JSON.stringify(myData);\r\n    // console.log(json);\r\n    const blob = new Blob([json], { type: \"application/json\" });\r\n    const href = await URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = href;\r\n    link.download = fileName + \".json\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  publish = (e) => {\r\n    if (this.state.panels.length == 0) alert(\"Please build your form first.\");\r\n    axios\r\n      .post(\r\n        \"https://formbuilder-umid.herokuapp.com/saveform\",\r\n        this.state.panels\r\n      )\r\n      .then((res) => {\r\n        // console.log(res);\r\n        // console.log(res.data);\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"buttons\">\r\n          {/* <input type=\"file\">Import JSON</input> */}\r\n          {/* <input type=\"file\" onChange={this.afterUpload} /> */}\r\n          <input\r\n            type=\"file\"\r\n            name=\"file\"\r\n            id=\"file\"\r\n            class=\"inputfile\"\r\n            onChange={this.afterUpload}\r\n            accept=\"json\"\r\n          />\r\n          <label for=\"file\">Upload JSON</label>\r\n          <a onClick={this.downloadFile} style={{ color: \"white\" }}>\r\n            Download JSON\r\n          </a>\r\n          <Link to=\"/allforms\">All forms</Link>\r\n          <Link to=\"/responses\">Responses</Link>\r\n        </div>\r\n\r\n        <div className=\"added_panels\">\r\n          <h2 style={{ marginLeft: \"-16vw\" }}>Start Building your form.</h2>\r\n          <div>\r\n            {this.state.panels.map((node, i) => {\r\n              let count = i;\r\n              if (node.type == \"static\")\r\n                return (\r\n                  <div className=\"added_panel\">\r\n                    {node.edit ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={node.value}\r\n                        name={i}\r\n                        onChange={(e, count) => this.handleChange(e, i)}\r\n                        onBlur={() => {\r\n                          let temp = this.state.panels;\r\n                          temp[count].edit = false;\r\n                          this.setState({\r\n                            panels: temp,\r\n                          });\r\n                        }}\r\n                      ></input>\r\n                    ) : (\r\n                      <p>\r\n                        {node.value}{\" \"}\r\n                        <span\r\n                          onClick={() => {\r\n                            let temp = this.state.panels;\r\n                            temp[count].edit = true;\r\n                            this.setState({\r\n                              panels: temp,\r\n                            });\r\n                          }}\r\n                        >\r\n                          Edit\r\n                        </span>\r\n                      </p>\r\n                    )}\r\n                    <div\r\n                      className=\"remove_button\"\r\n                      onClick={(e, count) => this.removepanel(e, i)}\r\n                    >\r\n                      <BsFillTrashFill />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              else if (node.type == \"text\") {\r\n                return (\r\n                  <div className=\"added_panel text_panel\">\r\n                    {node.edit ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={node.value}\r\n                        name={i}\r\n                        onChange={(e, count) => this.handleChange(e, i)}\r\n                        onBlur={() => {\r\n                          let temp = this.state.panels;\r\n                          temp[count].edit = false;\r\n                          this.setState({\r\n                            panels: temp,\r\n                          });\r\n                        }}\r\n                      ></input>\r\n                    ) : (\r\n                      <p>\r\n                        {node.value}\r\n                        <span\r\n                          onClick={() => {\r\n                            let temp = this.state.panels;\r\n                            temp[count].edit = true;\r\n                            this.setState({\r\n                              panels: temp,\r\n                            });\r\n                          }}\r\n                        >\r\n                          Edit\r\n                        </span>\r\n                      </p>\r\n                    )}\r\n                    <input\r\n                      style={{ marginTop: \"1vh\" }}\r\n                      type=\"text\"\r\n                      value=\"Answer Here\"\r\n                      disabled\r\n                    ></input>\r\n                    <div\r\n                      className=\"remove_button\"\r\n                      onClick={(e, count) => this.removepanel(e, i)}\r\n                    >\r\n                      <BsFillTrashFill />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              } else if (node.type == \"radio\") {\r\n                return (\r\n                  <div className=\"added_panel radio_panels\">\r\n                    {node.edit ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={node.value}\r\n                        name={i}\r\n                        onChange={(e, count) => this.handleChange(e, i)}\r\n                        onBlur={() => {\r\n                          let temp = this.state.panels;\r\n                          temp[count].edit = false;\r\n                          this.setState({\r\n                            panels: temp,\r\n                          });\r\n                        }}\r\n                      ></input>\r\n                    ) : (\r\n                      <p>\r\n                        {node.value}\r\n                        <span\r\n                          onClick={() => {\r\n                            let temp = this.state.panels;\r\n                            temp[count].edit = true;\r\n                            this.setState({\r\n                              panels: temp,\r\n                            });\r\n                          }}\r\n                        >\r\n                          Edit\r\n                        </span>\r\n                      </p>\r\n                    )}\r\n                    <div className=\"radio_options\">\r\n                      {node.values.map((node, j) => {\r\n                        let newcount = j;\r\n                        return (\r\n                          <div>\r\n                            <span>🔘</span>\r\n                            <div>\r\n                              <input\r\n                                type=\"text\"\r\n                                value={node}\r\n                                onChange={(e, i, j) => {\r\n                                  {\r\n                                    /* console.log(e, i, j); */\r\n                                  }\r\n                                  this.changeOptions(e, count, newcount);\r\n                                }}\r\n                              ></input>\r\n                            </div>\r\n                            <div\r\n                              className=\"radio_add\"\r\n                              onClick={(e, count) => {\r\n                                this.addOptions(e, i);\r\n                              }}\r\n                            >\r\n                              +\r\n                            </div>\r\n                            <div\r\n                              className=\"radio_add\"\r\n                              onClick={(e, count, newcount) => {\r\n                                this.deleteOptions(e, i, j);\r\n                              }}\r\n                            >\r\n                              {j > 0 ? \"-\" : \"\"}\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                    <div\r\n                      className=\"remove_button\"\r\n                      onClick={(e, count) => this.removepanel(e, i)}\r\n                    >\r\n                      <BsFillTrashFill />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              } else if (node.type == \"dropdown\") {\r\n                return (\r\n                  <div className=\"added_panel radio_panels\">\r\n                    {node.edit ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={node.value}\r\n                        name={i}\r\n                        onChange={(e, count) => this.handleChange(e, i)}\r\n                        onBlur={() => {\r\n                          let temp = this.state.panels;\r\n                          temp[count].edit = false;\r\n                          this.setState({\r\n                            panels: temp,\r\n                          });\r\n                          {\r\n                            /* console.log(this.state); */\r\n                          }\r\n                        }}\r\n                      ></input>\r\n                    ) : (\r\n                      <p>\r\n                        {node.value}\r\n                        <span\r\n                          onClick={() => {\r\n                            let temp = this.state.panels;\r\n                            temp[count].edit = true;\r\n                            this.setState({\r\n                              panels: temp,\r\n                            });\r\n                          }}\r\n                        >\r\n                          Edit\r\n                        </span>\r\n                      </p>\r\n                    )}\r\n                    <div className=\"radio_options\">\r\n                      {node.values.map((node, j) => {\r\n                        let newcount = j;\r\n                        return (\r\n                          <div>\r\n                            <span style={{ marginRight: \"5px\" }}>{j + 1}.</span>\r\n                            <div>\r\n                              <input\r\n                                type=\"text\"\r\n                                value={node}\r\n                                onChange={(e, i, j) => {\r\n                                  {\r\n                                    /* console.log(e, i, j); */\r\n                                  }\r\n                                  this.changeOptions(e, count, newcount);\r\n                                  {\r\n                                    /* console.log(this.state); */\r\n                                  }\r\n                                }}\r\n                              ></input>\r\n                            </div>\r\n                            <div\r\n                              className=\"radio_add\"\r\n                              onClick={(e, count) => {\r\n                                this.addOptions(e, i);\r\n                              }}\r\n                            >\r\n                              +\r\n                            </div>\r\n                            <div\r\n                              className=\"radio_add\"\r\n                              onClick={(e, count, newcount) => {\r\n                                this.deleteOptions(e, i, j);\r\n                              }}\r\n                            >\r\n                              {j > 0 ? \"-\" : \"\"}\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                    <div\r\n                      className=\"remove_button\"\r\n                      onClick={(e, count) => this.removepanel(e, i)}\r\n                    >\r\n                      <BsFillTrashFill />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n          <div className=\"add_button\">\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                Add\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={this.handleStatic}>\r\n                  Static\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={this.handleText}>Text</Dropdown.Item>\r\n                <Dropdown.Item onClick={this.handleRadio}>\r\n                  Radio Buttons\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={this.handleDrop}>\r\n                  Drop Down\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            <div className=\"publish_button\">\r\n              <Button onClick={this.publish}>Publish</Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Button from \"react-bootstrap/Button\";\r\nexport default class showandfill extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      datas: props.props.panel,\r\n      newForm: {},\r\n      newformdata: [],\r\n      panels: [],\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.setState({\r\n      datas: props.props.panel,\r\n    });\r\n  }\r\n\r\n  componentWillMount() {\r\n    // console.log(this.state.datas, \"wee\");\r\n  }\r\n\r\n  textChange = (e, i) => {\r\n    let x = this.state.datas;\r\n    let answer = e.target.value;\r\n    x[i].answer = answer;\r\n    this.setState({\r\n      panels: x,\r\n    });\r\n    // console.log(this.state);\r\n  };\r\n\r\n  sendresponse = (e) => {\r\n    axios\r\n      .post(\r\n        \"https://formbuilder-umid.herokuapp.com/saveresponse\",\r\n        this.state.panels\r\n      )\r\n      .then((res) => {\r\n        // console.log(res);\r\n        // console.log(res.data);\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"added_panels\">\r\n        <div className=\"added_panel\">\r\n          {this.state.datas.map((node, i) => {\r\n            let count = i;\r\n            if (node.type == \"static\") {\r\n              return <h3>{node.value}</h3>;\r\n            } else if (node.type == \"text\") {\r\n              return (\r\n                <div>\r\n                  <h3>{node.value}</h3>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={(e, count) => this.textChange(e, i)}\r\n                    placeholder=\"Answer here\"\r\n                  ></input>\r\n                </div>\r\n              );\r\n            } else if (node.type == \"radio\") {\r\n              return (\r\n                <div>\r\n                  <h3>{node.value}</h3>\r\n                  {node.values.map((options) => {\r\n                    return (\r\n                      <div\r\n                        onChange={(e, count) => {\r\n                          this.textChange(e, i);\r\n                        }}\r\n                        className=\"radio_distance\"\r\n                      >\r\n                        <input type=\"radio\" value={options} name={count} />\r\n                        {options}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            } else if (node.type == \"dropdown\") {\r\n              return (\r\n                <div className=\"drop_distance\">\r\n                  <h3>{node.value}</h3>\r\n                  <select\r\n                    onChange={(e, count) => {\r\n                      this.textChange(e, i);\r\n                      {\r\n                        /* console.log(e.target.value); */\r\n                      }\r\n                    }}\r\n                  >\r\n                    {node.values.map((options) => {\r\n                      return <option value={options}>{options}</option>;\r\n                    })}\r\n                  </select>\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n        <Button style={{ marginTop: \"2vh\" }} onClick={this.sendresponse}>\r\n          Send response\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport ShowandFill from \"./showandfill\";\r\nexport default class allforms extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allforms: [],\r\n      selectedform: {},\r\n    };\r\n    this.selected = this.selected.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    axios.get(\"https://formbuilder-umid.herokuapp.com/getall\").then((res) => {\r\n      // console.log(res.data);\r\n      this.setState({\r\n        allforms: res.data,\r\n      });\r\n    });\r\n    // console.log(this.state);\r\n  }\r\n\r\n  showandfill = (e) => {};\r\n\r\n  selected = (e, i) => {\r\n    this.setState({\r\n      selectedform: [],\r\n    });\r\n    this.setState({\r\n      selectedform: this.state.allforms[i],\r\n    });\r\n    // console.log(this.state);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ margin: \"5vh\" }}>\r\n          <h2>Please select any one form</h2>\r\n          <div className=\"myforms\">\r\n            {this.state.allforms.map((node, i) => {\r\n              {\r\n                /* console.log(this.state.selectedform); */\r\n              }\r\n              let count = i;\r\n              return (\r\n                <div\r\n                  className=\"form_conatiner\"\r\n                  onClick={(e, count) => this.selected(e, i)}\r\n                >\r\n                  <h1>Form {i + 1}</h1>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        {this.state.selectedform.hasOwnProperty(\"panel\") ? (\r\n          <div className=\"added_panels\">\r\n            <ShowandFill props={this.state.selectedform} />\r\n          </div>\r\n        ) : (\r\n          <p>No forms Selected</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class showres extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // console.log(props, \"showres\");\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.props = props;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"added_panel\">\r\n        {this.props.props.panel.map((node, i) => {\r\n          let count = i;\r\n          if (node.type == \"static\") {\r\n            return <h3>{node.value}</h3>;\r\n          } else if (node.type == \"text\") {\r\n            return (\r\n              <div>\r\n                <h3>{node.value}</h3>\r\n                <p>Answer: {node.answer}</p>\r\n              </div>\r\n            );\r\n          } else if (node.type == \"radio\") {\r\n            return (\r\n              <div>\r\n                <h3>{node.value}</h3>\r\n                <p>Answer: {node.answer}</p>\r\n              </div>\r\n            );\r\n          } else if (node.type == \"dropdown\") {\r\n            return (\r\n              <div>\r\n                <h3>{node.value}</h3>\r\n                <p>Answer: {node.answer}</p>\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Show from \"./showres\";\r\nexport default class responses extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allforms: [],\r\n      selectedform: {},\r\n    };\r\n    this.selected = this.selected.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    axios\r\n      .get(\"https://formbuilder-umid.herokuapp.com/getallresponses\")\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        this.setState({\r\n          allforms: res.data,\r\n        });\r\n      });\r\n    // console.log(this.state);\r\n  }\r\n\r\n  showandfill = (e) => {};\r\n\r\n  selected = (e, i) => {\r\n    this.setState({\r\n      selectedform: this.state.allforms[i],\r\n    });\r\n    // console.log(this.state);\r\n  };\r\n  render() {\r\n    return (\r\n      <div style={{ margin: \"5vh\" }}>\r\n        <h2>Please select any one response</h2>\r\n        <div className=\"myforms\">\r\n          {this.state.allforms.map((node, i) => {\r\n            {\r\n              /* console.log(this.state.selectedform); */\r\n            }\r\n            let count = i;\r\n            return (\r\n              <div className=\"form_conatiner\">\r\n                <h3 onClick={(e, count) => this.selected(e, i)}>\r\n                  Response {i + 1}\r\n                </h3>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        {this.state.selectedform.hasOwnProperty(\"panel\") ? (\r\n          <div className=\"added_panels\">\r\n            {/* <ShowandFill props={this.state.selectedform} /> */}\r\n            <Show props={this.state.selectedform} />\r\n          </div>\r\n        ) : (\r\n          <p>No forms available</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport FormBuilder from \"./Components/formBuilder\";\nimport \"./App.css\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Link, BrowserRouter as Router, Switch } from \"react-router-dom\";\n// import FormBuilder from \"./Components/formBuilder\";\nimport AllForm from \"./Components/allforms\";\nimport Responses from \"./Components/responses\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={FormBuilder} />\n        <Route path=\"/allforms\" component={AllForm} />\n        <Route path=\"/responses\" component={Responses} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}