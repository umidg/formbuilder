{"version":3,"sources":["Components/formBuilder.js","Components/showandfill.js","Components/allforms.js","Components/showres.js","Components/responses.js","App.js","serviceWorker.js","index.js"],"names":["formBuilder","props","handleStatic","e","addedPanel","state","panels","push","type","value","edit","setState","console","log","handleText","label","handleRadio","values","handleDrop","changeOptions","i","j","node","target","addOptions","deleteOptions","splice","handleChange","x","removepanel","afterUpload","mydatas","fileReader","FileReader","readAsText","files","mypanel","onload","JSON","parse","result","map","downloadFile","a","myData","fileName","json","stringify","blob","Blob","URL","createObjectURL","href","link","document","createElement","download","body","appendChild","click","removeChild","publish","length","alert","axios","post","then","res","data","bind","className","name","id","class","onChange","this","accept","for","onClick","style","color","to","marginLeft","count","onBlur","temp","marginTop","disabled","newcount","marginRight","Dropdown","Toggle","variant","Menu","Item","Button","Component","showandfill","textChange","datas","answer","sendresponse","panel","newForm","newformdata","placeholder","options","allforms","selected","selectedform","get","margin","hasOwnProperty","showres","responses","App","path","exact","component","FormBuilder","AllForm","Responses","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c20cd14.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { BsFillTrashFill } from \"react-icons/bs\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default class formBuilder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      panels: [],\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleStatic.bind(this);\r\n  }\r\n\r\n  handleStatic = (e) => {\r\n    let panel = {\r\n      type: \"static\",\r\n      value: \"\",\r\n      edit: true,\r\n    };\r\n    let addedPanel = [...this.state.panels];\r\n    addedPanel.push(panel);\r\n    this.setState({\r\n      panels: addedPanel,\r\n    });\r\n    console.log(this.state, \"handlestatic\");\r\n  };\r\n\r\n  handleText = (e) => {\r\n    let panel = {\r\n      type: \"text\",\r\n      value: \"\",\r\n      label: \"\",\r\n      edit: true,\r\n    };\r\n    let addedPanel = [...this.state.panels];\r\n    addedPanel.push(panel);\r\n    this.setState({\r\n      panels: addedPanel,\r\n    });\r\n    console.log(this.state, \"handlestatic\");\r\n  };\r\n\r\n  handleRadio = (e) => {\r\n    let panel = {\r\n      type: \"radio\",\r\n      values: [\"\"],\r\n      value: \"\",\r\n      edit: true,\r\n    };\r\n    let addedPanel = [...this.state.panels];\r\n    addedPanel.push(panel);\r\n    this.setState({\r\n      panels: addedPanel,\r\n    });\r\n    console.log(this.state, \"handlestatic\");\r\n  };\r\n\r\n  handleDrop = (e) => {\r\n    let panel = {\r\n      type: \"dropdown\",\r\n      values: [\"\"],\r\n      value: \"\",\r\n      edit: true,\r\n    };\r\n    let addedPanel = [...this.state.panels];\r\n    addedPanel.push(panel);\r\n    this.setState({\r\n      panels: addedPanel,\r\n    });\r\n    console.log(this.state, \"handlestatic\");\r\n  };\r\n  changeOptions = (e, i, j) => {\r\n    let node = this.state.panels;\r\n    node[i].values[j] = e.target.value;\r\n    this.setState({\r\n      panels: node,\r\n    });\r\n    console.log(this.state, e, i, j);\r\n  };\r\n\r\n  addOptions = (e, i) => {\r\n    let node = this.state.panels;\r\n    node[i].values.push(\"\");\r\n    this.setState({\r\n      panels: node,\r\n    });\r\n  };\r\n\r\n  deleteOptions = (e, i, j) => {\r\n    let node = this.state.panels;\r\n    node[i].values.splice(j, 1);\r\n    // node[i].values.push(\"\");\r\n    this.setState({\r\n      panels: node,\r\n    });\r\n  };\r\n\r\n  handleChange = (e, i) => {\r\n    let x = this.state.panels;\r\n    x[i].value = e.target.value;\r\n    this.setState({\r\n      panels: x,\r\n    });\r\n    console.log(this.state);\r\n  };\r\n\r\n  removepanel = (e, i) => {\r\n    let node = this.state.panels;\r\n    node.splice(i, 1);\r\n    this.setState({\r\n      panels: node,\r\n    });\r\n  };\r\n\r\n  afterUpload = (e) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsText(e.target.files[0], \"UTF-8\");\r\n    let mydatas;\r\n    let mypanel = [];\r\n    fileReader.onload = (e) => {\r\n      mydatas = JSON.parse(e.target.result);\r\n      console.log(\r\n        \"e.target.result\",\r\n        JSON.parse(e.target.result),\r\n        e.target.result\r\n      );\r\n      console.log(\"uploaded\");\r\n      //   setFiles(e.target.result);\r\n      mydatas.map((node) => {\r\n        mypanel.push(node);\r\n      });\r\n      this.setState({\r\n        panels: mypanel,\r\n      });\r\n    };\r\n  };\r\n\r\n  downloadFile = async () => {\r\n    let myData = this.state.panels;\r\n\r\n    console.log(myData, \"hey\");\r\n    const fileName = \"file\";\r\n    const json = JSON.stringify(myData);\r\n    console.log(json);\r\n    const blob = new Blob([json], { type: \"application/json\" });\r\n    const href = await URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = href;\r\n    link.download = fileName + \".json\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  publish = (e) => {\r\n    if (this.state.panels.length == 0) alert(\"Please build your form first.\");\r\n    axios\r\n      .post(\r\n        \"https://formbuilder-umid.herokuapp.com/saveform\",\r\n        this.state.panels\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        console.log(res.data);\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"buttons\">\r\n          {/* <input type=\"file\">Import JSON</input> */}\r\n          {/* <input type=\"file\" onChange={this.afterUpload} /> */}\r\n          <input\r\n            type=\"file\"\r\n            name=\"file\"\r\n            id=\"file\"\r\n            class=\"inputfile\"\r\n            onChange={this.afterUpload}\r\n            accept=\"json\"\r\n          />\r\n          <label for=\"file\">Upload JSON</label>\r\n          <a onClick={this.downloadFile} style={{ color: \"white\" }}>\r\n            Download my json\r\n          </a>\r\n          <Link to=\"/allforms\">All my forms</Link>\r\n          <Link to=\"/responses\">Responses</Link>\r\n        </div>\r\n\r\n        <div className=\"added_panels\">\r\n          <h2 style={{ marginLeft: \"-16vw\" }}>Start Building your form.</h2>\r\n          <div>\r\n            {this.state.panels.map((node, i) => {\r\n              let count = i;\r\n              if (node.type == \"static\")\r\n                return (\r\n                  <div className=\"added_panel\">\r\n                    {node.edit ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={node.value}\r\n                        name={i}\r\n                        onChange={(e, count) => this.handleChange(e, i)}\r\n                        onBlur={() => {\r\n                          let temp = this.state.panels;\r\n                          temp[count].edit = false;\r\n                          this.setState({\r\n                            panels: temp,\r\n                          });\r\n                        }}\r\n                      ></input>\r\n                    ) : (\r\n                      <p>\r\n                        {node.value}{\" \"}\r\n                        <span\r\n                          onClick={() => {\r\n                            let temp = this.state.panels;\r\n                            temp[count].edit = true;\r\n                            this.setState({\r\n                              panels: temp,\r\n                            });\r\n                          }}\r\n                        >\r\n                          Edit\r\n                        </span>\r\n                      </p>\r\n                    )}\r\n                    <div\r\n                      className=\"remove_button\"\r\n                      onClick={(e, count) => this.removepanel(e, i)}\r\n                    >\r\n                      <BsFillTrashFill />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              else if (node.type == \"text\") {\r\n                return (\r\n                  <div className=\"added_panel text_panel\">\r\n                    {node.edit ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={node.value}\r\n                        name={i}\r\n                        onChange={(e, count) => this.handleChange(e, i)}\r\n                        onBlur={() => {\r\n                          let temp = this.state.panels;\r\n                          temp[count].edit = false;\r\n                          this.setState({\r\n                            panels: temp,\r\n                          });\r\n                        }}\r\n                      ></input>\r\n                    ) : (\r\n                      <p>\r\n                        {node.value}\r\n                        <span\r\n                          onClick={() => {\r\n                            let temp = this.state.panels;\r\n                            temp[count].edit = true;\r\n                            this.setState({\r\n                              panels: temp,\r\n                            });\r\n                          }}\r\n                        >\r\n                          Edit\r\n                        </span>\r\n                      </p>\r\n                    )}\r\n                    <input\r\n                      style={{ marginTop: \"1vh\" }}\r\n                      type=\"text\"\r\n                      value=\"Answer Here\"\r\n                      disabled\r\n                    ></input>\r\n                    <div\r\n                      className=\"remove_button\"\r\n                      onClick={(e, count) => this.removepanel(e, i)}\r\n                    >\r\n                      <BsFillTrashFill />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              } else if (node.type == \"radio\") {\r\n                return (\r\n                  <div className=\"added_panel radio_panels\">\r\n                    {node.edit ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={node.value}\r\n                        name={i}\r\n                        onChange={(e, count) => this.handleChange(e, i)}\r\n                        onBlur={() => {\r\n                          let temp = this.state.panels;\r\n                          temp[count].edit = false;\r\n                          this.setState({\r\n                            panels: temp,\r\n                          });\r\n                        }}\r\n                      ></input>\r\n                    ) : (\r\n                      <p>\r\n                        {node.value}\r\n                        <span\r\n                          onClick={() => {\r\n                            let temp = this.state.panels;\r\n                            temp[count].edit = true;\r\n                            this.setState({\r\n                              panels: temp,\r\n                            });\r\n                          }}\r\n                        >\r\n                          Edit\r\n                        </span>\r\n                      </p>\r\n                    )}\r\n                    <div className=\"radio_options\">\r\n                      {node.values.map((node, j) => {\r\n                        let newcount = j;\r\n                        return (\r\n                          <div>\r\n                            <span>🔘</span>\r\n                            <div>\r\n                              <input\r\n                                type=\"text\"\r\n                                value={node}\r\n                                onChange={(e, i, j) => {\r\n                                  {\r\n                                    /* console.log(e, i, j); */\r\n                                  }\r\n                                  this.changeOptions(e, count, newcount);\r\n                                }}\r\n                              ></input>\r\n                            </div>\r\n                            <div\r\n                              className=\"radio_add\"\r\n                              onClick={(e, count) => {\r\n                                this.addOptions(e, i);\r\n                              }}\r\n                            >\r\n                              +\r\n                            </div>\r\n                            <div\r\n                              className=\"radio_add\"\r\n                              onClick={(e, count, newcount) => {\r\n                                this.deleteOptions(e, i, j);\r\n                              }}\r\n                            >\r\n                              {j > 0 ? \"-\" : \"\"}\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                    <div\r\n                      className=\"remove_button\"\r\n                      onClick={(e, count) => this.removepanel(e, i)}\r\n                    >\r\n                      <BsFillTrashFill />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              } else if (node.type == \"dropdown\") {\r\n                return (\r\n                  <div className=\"added_panel radio_panels\">\r\n                    {node.edit ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        value={node.value}\r\n                        name={i}\r\n                        onChange={(e, count) => this.handleChange(e, i)}\r\n                        onBlur={() => {\r\n                          let temp = this.state.panels;\r\n                          temp[count].edit = false;\r\n                          this.setState({\r\n                            panels: temp,\r\n                          });\r\n                          console.log(this.state);\r\n                        }}\r\n                      ></input>\r\n                    ) : (\r\n                      <p>\r\n                        {node.value}\r\n                        <span\r\n                          onClick={() => {\r\n                            let temp = this.state.panels;\r\n                            temp[count].edit = true;\r\n                            this.setState({\r\n                              panels: temp,\r\n                            });\r\n                          }}\r\n                        >\r\n                          Edit\r\n                        </span>\r\n                      </p>\r\n                    )}\r\n                    <div className=\"radio_options\">\r\n                      {node.values.map((node, j) => {\r\n                        let newcount = j;\r\n                        return (\r\n                          <div>\r\n                            <span style={{ marginRight: \"5px\" }}>{j + 1}.</span>\r\n                            <div>\r\n                              <input\r\n                                type=\"text\"\r\n                                value={node}\r\n                                onChange={(e, i, j) => {\r\n                                  {\r\n                                    /* console.log(e, i, j); */\r\n                                  }\r\n                                  this.changeOptions(e, count, newcount);\r\n                                  console.log(this.state);\r\n                                }}\r\n                              ></input>\r\n                            </div>\r\n                            <div\r\n                              className=\"radio_add\"\r\n                              onClick={(e, count) => {\r\n                                this.addOptions(e, i);\r\n                              }}\r\n                            >\r\n                              +\r\n                            </div>\r\n                            <div\r\n                              className=\"radio_add\"\r\n                              onClick={(e, count, newcount) => {\r\n                                this.deleteOptions(e, i, j);\r\n                              }}\r\n                            >\r\n                              {j > 0 ? \"-\" : \"\"}\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                    <div\r\n                      className=\"remove_button\"\r\n                      onClick={(e, count) => this.removepanel(e, i)}\r\n                    >\r\n                      <BsFillTrashFill />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n          <div className=\"add_button\">\r\n            <Dropdown>\r\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                Add\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={this.handleStatic}>\r\n                  Static\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={this.handleText}>Text</Dropdown.Item>\r\n                <Dropdown.Item onClick={this.handleRadio}>\r\n                  Radio Buttons\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={this.handleDrop}>\r\n                  Drop Down\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            <div className=\"publish_button\">\r\n              <Button onClick={this.publish}>Publish</Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Button from \"react-bootstrap/Button\";\r\nexport default class showandfill extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      datas: props.props.panel,\r\n      newForm: {},\r\n      newformdata: [],\r\n      panels: [],\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    console.log(this.state.datas, \"wee\");\r\n  }\r\n\r\n  textChange = (e, i) => {\r\n    let x = this.state.datas;\r\n    let answer = e.target.value;\r\n    x[i].answer = answer;\r\n    this.setState({\r\n      panels: x,\r\n    });\r\n    console.log(this.state);\r\n  };\r\n\r\n  sendresponse = (e) => {\r\n    axios\r\n      .post(\r\n        \"https://formbuilder-umid.herokuapp.com/saveresponse\",\r\n        this.state.panels\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        console.log(res.data);\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"added_panels\">\r\n        <div className=\"added_panel\">\r\n          {this.state.datas.map((node, i) => {\r\n            let count = i;\r\n            if (node.type == \"static\") {\r\n              return <h3>{node.value}</h3>;\r\n            } else if (node.type == \"text\") {\r\n              return (\r\n                <div>\r\n                  <h3>{node.value}</h3>\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={(e, count) => this.textChange(e, i)}\r\n                    placeholder=\"Answer here\"\r\n                  ></input>\r\n                </div>\r\n              );\r\n            } else if (node.type == \"radio\") {\r\n              return (\r\n                <div>\r\n                  <h3>{node.value}</h3>\r\n                  {node.values.map((options) => {\r\n                    return (\r\n                      <div\r\n                        onChange={(e, count) => {\r\n                          this.textChange(e, i);\r\n                        }}\r\n                        className=\"radio_distance\"\r\n                      >\r\n                        <input type=\"radio\" value={options} name={count} />\r\n                        {options}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            } else if (node.type == \"dropdown\") {\r\n              return (\r\n                <div className=\"drop_distance\">\r\n                  <h3>{node.value}</h3>\r\n                  <select\r\n                    onChange={(e, count) => {\r\n                      this.textChange(e, i);\r\n                      console.log(e.target.value);\r\n                    }}\r\n                  >\r\n                    {node.values.map((options) => {\r\n                      return <option value={options}>{options}</option>;\r\n                    })}\r\n                  </select>\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n        <Button style={{ marginTop: \"2vh\" }} onClick={this.sendresponse}>\r\n          Send response\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport ShowandFill from \"./showandfill\";\r\nexport default class allforms extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allforms: [],\r\n      selectedform: {},\r\n    };\r\n    this.selected = this.selected.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    axios.get(\"https://formbuilder-umid.herokuapp.com/getall\").then((res) => {\r\n      console.log(res.data);\r\n      this.setState({\r\n        allforms: res.data,\r\n      });\r\n    });\r\n    console.log(this.state);\r\n  }\r\n\r\n  showandfill = (e) => {};\r\n\r\n  selected = (e, i) => {\r\n    this.setState({\r\n      selectedform: this.state.allforms[i],\r\n    });\r\n    console.log(this.state);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ margin: \"5vh\" }}>\r\n          <h2>Please select any one form</h2>\r\n          <div className=\"myforms\">\r\n            {this.state.allforms.map((node, i) => {\r\n              console.log(this.state.selectedform);\r\n              let count = i;\r\n              return (\r\n                <div\r\n                  className=\"form_conatiner\"\r\n                  onClick={(e, count) => this.selected(e, i)}\r\n                >\r\n                  <h1>Form {i + 1}</h1>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        {this.state.selectedform.hasOwnProperty(\"panel\") ? (\r\n          <div className=\"added_panels\">\r\n            <ShowandFill props={this.state.selectedform} />\r\n          </div>\r\n        ) : (\r\n          <p>No forms Selected</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class showres extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(props, \"showres\");\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"added_panel\">\r\n        {this.props.props.panel.map((node, i) => {\r\n          let count = i;\r\n          if (node.type == \"static\") {\r\n            return <h3>{node.value}</h3>;\r\n          } else if (node.type == \"text\") {\r\n            return (\r\n              <div>\r\n                <h3>{node.value}</h3>\r\n                <p>Answer: {node.answer}</p>\r\n              </div>\r\n            );\r\n          } else if (node.type == \"radio\") {\r\n            return (\r\n              <div>\r\n                <h3>{node.value}</h3>\r\n                <p>Answer: {node.answer}</p>\r\n              </div>\r\n            );\r\n          } else if (node.type == \"dropdown\") {\r\n            return (\r\n              <div>\r\n                <h3>{node.value}</h3>\r\n                <p>Answer: {node.answer}</p>\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Show from \"./showres\";\r\nexport default class responses extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      allforms: [],\r\n      selectedform: {},\r\n    };\r\n    this.selected = this.selected.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    axios\r\n      .get(\"https://formbuilder-umid.herokuapp.com/getallresponses\")\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        this.setState({\r\n          allforms: res.data,\r\n        });\r\n      });\r\n    console.log(this.state);\r\n  }\r\n\r\n  showandfill = (e) => {};\r\n\r\n  selected = (e, i) => {\r\n    this.setState({\r\n      selectedform: this.state.allforms[i],\r\n    });\r\n    console.log(this.state);\r\n  };\r\n  render() {\r\n    return (\r\n      <div style={{ margin: \"5vh\" }}>\r\n        <h2>Please select any one response</h2>\r\n        <div className=\"myforms\">\r\n          {this.state.allforms.map((node, i) => {\r\n            console.log(this.state.selectedform);\r\n            let count = i;\r\n            return (\r\n              <div className=\"form_conatiner\">\r\n                <h3 onClick={(e, count) => this.selected(e, i)}>\r\n                  Response {i + 1}\r\n                </h3>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        {this.state.selectedform.hasOwnProperty(\"panel\") ? (\r\n          <div className=\"added_panels\">\r\n            {/* <ShowandFill props={this.state.selectedform} /> */}\r\n            <Show props={this.state.selectedform} />\r\n          </div>\r\n        ) : (\r\n          <p>No forms available</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport FormBuilder from \"./Components/formBuilder\";\nimport \"./App.css\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Link, BrowserRouter as Router, Switch } from \"react-router-dom\";\n// import FormBuilder from \"./Components/formBuilder\";\nimport AllForm from \"./Components/allforms\";\nimport Responses from \"./Components/responses\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={FormBuilder} />\n        <Route path=\"/allforms\" component={AllForm} />\n        <Route path=\"/responses\" component={Responses} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}